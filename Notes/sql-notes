- ACID
    --ACID is an acronym that refers to the set of 4 key properties that define a transaction: Atomicity, Consistency, Isolation, and Durability.
    --If a database operation has these ACID properties, it can be called an ACID transaction, and data storage systems that apply these operations are called transactional systems.
    --ACID transactions guarantee that each read, write, or modification of a table has the following properties:
        Atomicity - each statement in a transaction (to read, write, update or delete data) is treated as a single unit. Either the entire statement is executed, or none of it is executed. This property prevents data loss and corruption from occurring if, for example, if your streaming data source fails mid-stream.
        Consistency - ensures that transactions only make changes to tables in predefined, predictable ways. Transactional consistency ensures that corruption or errors in your data do not create unintended consequences for the integrity of your table.
        Isolation - when multiple users are reading and writing from the same table all at once, isolation of their transactions ensures that the concurrent transactions donâ€™t interfere with or affect one another. Each request can occur as though they were occurring one by one, even though they're actually occurring simultaneously.
        Durability - ensures that changes to your data made by successfully executed transactions will be saved, even in the event of system failure.

-Database Architecture (3 Level Architecture)

    External Level (Individual User View)
                    v
    Conceptual Level (community user view)
                    v
    Internal level (storage view)
                    v
                 Database

- 4-Steps to create database
    --Collect the Database
    --Prepare ER Diagrams
    --Convert ER diagrams into tables
    -- Normalize the table

-ER Diagrams:
    --Entity
    --Relationship
    --attributes => *Defining Columns*
    --Keys   => *Uniquely identifies a row/tuple*
        
- REDUNDANCY
    - Same data stored in multiple locations
    - memory
    - inconsistancy
==============================================================================

- NORMALIZATION
    - Dependencies: 
        - Functional => A depends on B
        - Partial => (A,B) => C
        - Transitive => attribute depends on an attribute other than primary key

- Normal Forms:
    - 1 NF:
        - 
    - 2 NF
    - 3 NF

==============================================================================
-NULL
    --NULL values are not 0 or BLANK
    --It represents Unknown values
    --use IS NULL or IS NOT NULL to retrive NULL values



-INSERT
    --Default order => INSERT INTO COMPANY_NEW VALUES (1, 'WIPRO');
    --Changed Order => INSERT INTO COMPANY_NEW(compname,compid) VALUES ('TCS',2);
    --Multiple Rows => INSERT INTO COMPANY_NEW VALUES (3,'ORACLE'),(4,'INFOSYS'),(5,'SG'),(6,'CTS');
    --Using SET variable => SET @v1=7, @v2='emc2'; INSERT INTO company_new values (@v1,@v2);
    --Inserting NULL => Omit the column(INSERT INTO company_new(compid) VALUES (9);) , Explicitly use NULL (INSERT INTO company_new VALUES (8,NULL);)
    --Copying rows from other table => INSERT INTO company_new SELECT col1,col2 FROM <Tablename> ==VALUES Keyword is not present in this Command==
    --Explicitly Default => INSERT INTO default_tab VALUES(201,DEFAULT);

-UPDATE => Modifying existing Rows
    --Syntax: UPDATE <tablename> SET col1=value1,col2=value2 WHERE <condition>
    --



